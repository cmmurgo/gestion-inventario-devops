name: CI/CD Temporal

on:
  push:
    branches: [ "merge-test-fernandoQA" ]
  pull_request:
    branches: [ "merge-test-fernandoQA" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Se añade un servicio de base de datos para que las pruebas del backend funcionen
    services:
      postgres:
        image: postgres:14-alpine
        # Variables de entorno para crear la base de datos de prueba
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Opción para asegurar que la base de datos esté lista antes de correr las pruebas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      # Configuración del entorno de Node.js
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Caché para las dependencias de npm para acelerar el proceso
      - name: Cachear dependencias de npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Correr tests del backend y genera reporte de cobertura 
      - name: Instalar y testear backend
        env:
          # AHORA se usan secretos para las credenciales
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          cd backend
          npm ci    # Instalación limpia para entorno CI
          npm run test   # Ejecuta las pruebas automatizadas

      # Configurar Docker Buildx
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login a Docker Hub
      - name: Login a Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construcción y Push de la imagen del backend
      - name: Build y Push de imagen backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend-inventario:latest

      # Construcción y Push de la imagen del frontend
      - name: Build y Push de imagen frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend-inventario:latest
      
      # El despliegue es automático vía Vercel al hacer push a 'main'

